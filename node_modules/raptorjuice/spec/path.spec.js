require('cheeba')(global);

var R = require('../');

describe('Path functions...', function() {

  var test;

  beforeEach(function() {
    test = { ing : { a : [ 1, 2 ], b : [ 3, 4, [ 5, 6 ] ] } };
  });

  describe('unwrap...', function() {

    it('can create necessary nodes by key', function() {
      var layers = R.unwrap(test, 'c');
      test.c.should.equal(layers.object);
    });

    it('can create necessary nested nodes by key', function() {
      var layers = R.unwrap(test, 'c.test');
      test.c.test.should.equal(layers.object);
    });

    it('can create necessary nodes by index', function() {
      var layers = R.unwrap(test, 'ing.a.2')
      test.ing.a[2].should.eql(layers.object);
    });

    it('can create necessary nested nodes by index', function() {
      var layers = R.unwrap(test, 'ing.a:2:1')
      test.ing.a[2][1].should.eql(layers.object);
    });

    it('does not overwrite nodes', function() {
      var layers = R.unwrap(test, 'ing.a.0.test');
      expect(layers.object).to.be.undefined;
    });

    it('returns its root object', function() {
      R.unwrap(test, 'test').root.should.eql(test);
    });

    it('returns its path', function() {
      R.unwrap(test, 'test.ing:123').path.should.equal('test.ing:123');
    });

    it('returns a key', function() {
      var layers = R.unwrap(test, 'ing');
      layers.key.should.equal('ing');
      expect(layers.index).to.be.undefined;
    });

    it('returns a key when nested', function() {
      var layers = R.unwrap(test, 'ing.c.b.a');
      layers.key.should.equal('a');
      expect(layers.index).to.be.undefined;
    });

    it('returns an index', function() {
      var layers = R.unwrap(test, 'ing.a:1');
      layers.index.should.equal('1');
      expect(layers.key).to.be.undefined;
    });

    it('returns an index when nested', function() {
      var layers = R.unwrap(test, 'ing.b:2:1');
      layers.index.should.equal('1');
      expect(layers.key).to.be.undefined;
    });

  });

  describe('set...', function() {

    it('can set a key value', function() {
      var object = { };
      R.set(object, 'test', true);
      object.should.eql({ test : true });
    });

    it('can set a nested key value', function() {
      var object = { };
      R.set(object, 'test.ing.123', true);
      object.should.eql({ test : { ing : { '123' : true } } });
    });

    it('can set an index value', function() {
      var object = { test : { ing : [ 0 ] } };
      R.set(object, 'test.ing:1', 1);
      object.should.eql({ test : { ing : [ 0, 1 ] } });
    });

    it('properly throws an error', function() {
      var object = { test : 'do not overwrite' };
      try {
        R.set(object, 'test:ing.123', true);
      } catch(e) { }
      object.should.eql({ test : 'do not overwrite' });
    });

    it('does not overwrite values', function() {
      var object = { test : 'do not overwrite' };
      try {
        R.set(object, 'test:ing.123', 'overwrote');
      } catch(e) { }
      object.should.eql({ test : 'do not overwrite' });
    });

    it('does not overwrite falsy values', function() {
      var object = { test : false };
      try {
        R.set(object, 'test:ing.123', 'overwrote');
      } catch(e) { }
      object.should.eql({ test : false });
    });

    it('can set by force', function() {
      var object = { test : false };
      try {
        R.set(object, 'test.ing:1', 'overwrote', true);
      } catch(e) { }
      object.should.eql({ test : { 'ing' : { 1 :  'overwrote' } } });
    });

  });

  describe('get...', function() {

    it('can get a value for a key', function() {
      R.unwrap(test, 'ing').object.should.equal(test.ing);
    });

    it('can get a value for a nested key', function() {
      R.unwrap(test, 'ing.a').object.should.equal(test.ing.a);
    });

    it('can get a value for an index', function() {
      R.unwrap(test, 'ing.a:0').object.should.equal(test.ing.a[0]);
    });

    it('can get a value for a nested index', function() {
      R.unwrap(test, 'ing.b:2:1').object.should.equal(test.ing.b[2][1]);
    });

  });


});
