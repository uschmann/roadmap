require('cheeba')(global);

var R = require('../../');

describe('index...', function() {

  it('accurately describes the index of the data model', function() {
    R.iterate([ ]).index().should.equal(0);
    R.iterate([ 1 ]).index().should.equal(0);
    R.iterate([ 1, 2, 3, 4 ]).index().should.equal(0);
  });

  describe('maintains its valitidy after a call to...', function() {

    var gen;
    beforeEach(function() {
      gen = R.iterate([ 1, 2, 3, 4 ]);
      gen.next(); gen.next();
    });

    it('next', function() {
      gen.index().should.equal(2);
    });

    it('reverse', function() {
      gen.reverse();
      gen.index().should.equal(2);
      gen.reverse();
      gen.index().should.equal(2);
    });

    it('reset', function() {
      gen.reset().index().should.equal(0);
    });

    it('deplete', function() {
      gen.deplete().index().should.equal(4);
    });

    it('filter', function() {
      gen.filter(function(v) { return !(v % 2); });
      gen.index().should.equal(1);
    });

    describe('push...', function() {

      describe('at the beginning of the model with the cursor there...',
          function() {

        beforeEach(function() {
          gen.reset();
        });

        it('with a falsy item', function() {
          gen.push(1, [ ]).index().should.equal(0);
          gen.data().should.eql([ 1, 2, 3, 4 ]);
        });

        it('with a single item', function() {
          gen.push(1, [ 5 ]).index().should.equal(0);
          gen.data().should.eql([ 5, 1, 2, 3, 4 ]);
        });

        it('with multiple items', function() {
          gen.push(1, [ 5, 6 ]).index().should.equal(0);
          gen.data().should.eql([ 5, 6, 1, 2, 3, 4 ]);
        });

      });

      describe('at the beginning of the model...', function() {

        it('with a falsy item', function() {
          gen.push(1, [ ]).index().should.equal(2);
          gen.data().should.eql([ 1, 2, 3, 4 ]);
        });

        it('with a single item', function() {
          gen.push(1, [ 5 ]).index().should.equal(3);
          gen.data().should.eql([ 5, 1, 2, 3, 4 ]);
        });

        it('with multiple items', function() {
          gen.push(1, [ 5, 6 ]).index().should.equal(4);
          gen.data().should.eql([ 5, 6, 1, 2, 3, 4 ]);
        });

      });

      describe('before the cursor...', function() {

        beforeEach(function() {
          gen.next();
        });

        it('with a falsy item', function() {
          gen.push(2, [ ]).index().should.equal(3);
        });

        it('with a single item', function() {
          gen.push(2, [ 1.5 ]).index().should.equal(4);
          gen.data().should.eql([ 1, 1.5, 2, 3, 4 ]);
        });

        it('with multiple items', function() {
          gen.push(2, [ 1.5, 1.75 ]).index().should.equal(5);
          gen.data().should.eql([ 1, 1.5, 1.75, 2, 3, 4 ]);
        });

      });

      describe('under the cursor...', function() {

        it('with a falsy item', function() {
          gen.push(2, [ ]).index().should.equal(2);
        });

        it('with a single item', function() {
          gen.push(2, [ 1.5 ]).index().should.equal(2);
          gen.data().should.eql([ 1, 1.5, 2, 3, 4 ]);
        });

        it('with multiple items', function() {
          gen.push(2, [ 1.5, 1.75 ]).index().should.equal(2);
          gen.data().should.eql([ 1, 1.5, 1.75, 2, 3, 4 ]);
        });

      });

      describe('after the cursor...', function() {

        beforeEach(function() {
          gen.prev();
        });

        it('with a falsy item', function() {
          gen.push(2, [ ]).index().should.equal(1);
        });

        it('with a single item', function() {
          gen.push(2, [ 1.5 ]).index().should.equal(1);
          gen.data().should.eql([ 1, 1.5, 2, 3, 4 ]);
        });

        it('with multiple items', function() {
          gen.push(2, [ 1.5, 1.75 ]).index().should.equal(1);
          gen.data().should.eql([ 1, 1.5, 1.75, 2, 3, 4 ]);
        });

      });

      describe('at the end of the model...', function() {

        it('with a falsy item', function() {
          gen.push().index().should.equal(2);
          gen.push([ ]).index().should.equal(2);
          gen.data().should.eql([ 1, 2, 3, 4 ]);
        });

        it('with a single item', function() {
          gen.push([ 5 ]).index().should.equal(2);
          gen.data().should.eql([ 1, 2, 3, 4, 5 ]);
        });

        it('with multiple items', function() {
          gen.push([ 5, 6 ]).index().should.equal(2);
          gen.data().should.eql([ 1, 2, 3, 4, 5, 6 ]);
        });

      });

      describe('at the end of the model with the cursor there...',
          function() {


        beforeEach(function() {
          gen.next(); gen.next(); 
        });

        it('with a falsy item', function() {
          gen.push().index().should.equal(4);
          gen.push([ ]).index().should.equal(4);
          gen.data().should.eql([ 1, 2, 3, 4 ]);
        });

        it('with a single item', function() {
          gen.push([ 5 ]).index().should.equal(4);
          gen.data().should.eql([ 1, 2, 3, 4, 5 ]);
        });

        it('with multiple items', function() {
          gen.push([ 5, 6 ]).index().should.equal(4);
          gen.data().should.eql([ 1, 2, 3, 4, 5, 6 ]);
        });

      });

    });

    describe('pop...', function() {

      describe('at the beginning of the model with the cursor there...',
          function() {

        beforeEach(function() {
          gen.reset();
        });

        it('with a single item', function() {
          gen.pop(1).should.eql([ 1 ]);
          gen.index().should.equal(0);
          gen.data().should.eql([ 2, 3, 4 ]);
        });

        it('with multiple items', function() {
          gen.pop(1, 2).should.eql([ 1, 2 ]);
          gen.index().should.equal(0);
          gen.data().should.eql([ 3, 4 ]);
        });

      });

      describe('at the beginning of the model...', function() {

        it('with a single item', function() {
          gen.pop(1).should.eql([ 1 ]);
          gen.index().should.equal(1);
          gen.data().should.eql([ 2, 3, 4 ]);
        });

        it('with multiple items', function() {
          gen.pop(1, 2).should.eql([ 1, 2 ]);
          gen.index().should.equal(0);
          gen.data().should.eql([ 3, 4 ]);
        });

      });

      describe('before the cursor...', function() {

        beforeEach(function() {
          gen.next();
        });

        it('with a single item', function() {
          gen.pop(2).should.eql([ 2 ]);
          gen.index().should.equal(2);
          gen.data().should.eql([ 1, 3, 4 ]);
        });

        it('with multiple items', function() {
          gen.pop(2, 2).should.eql([ 2, 3 ]);
          gen.index().should.equal(1);
          gen.data().should.eql([ 1, 4 ]);
        });

      });

      describe('under the cursor...', function() {

        it('with a single item', function() {
          gen.pop(2).should.eql([ 2 ]);
          gen.index().should.equal(1);
          gen.data().should.eql([ 1, 3, 4 ]);
        });

        it('with multiple items', function() {
          gen.pop(2, 2).should.eql([ 2, 3 ]);
          gen.index().should.equal(1);
          gen.data().should.eql([ 1, 4 ]);
        });

      });

      describe('after the cursor...', function() {

        beforeEach(function() {
          gen.prev();
        });

        it('with a single item', function() {
          gen.pop(2).should.eql([ 2 ]);
          gen.index().should.equal(1);
          gen.data().should.eql([ 1, 3, 4 ]);
        });

        it('with multiple items', function() {
          gen.pop(2, 2).should.eql([ 2, 3 ]);
          gen.index().should.equal(1);
          gen.data().should.eql([ 1, 4 ]);
        });

      });

      describe('at the end of the model...', function() {

        it('with a single item', function() {
          gen.pop(gen.length()).should.eql([ 4 ]);
          gen.index().should.equal(2);
          gen.data().should.eql([ 1, 2, 3 ]);
        });

        it('with multiple items', function() {
          gen.pop(3, 2).should.eql([ 3, 4 ]);
          gen.index().should.equal(2);
          gen.data().should.eql([ 1, 2 ]);
        });

      });

      describe('at the end of the model with the cursor there...',
          function() {


        beforeEach(function() {
          gen.next(); gen.next(); 
        });

        it('with a single item', function() {
          gen.pop(gen.length()).should.eql([ 4 ]);
          gen.index().should.equal(3);
          gen.data().should.eql([ 1, 2, 3 ]);
        });

        it('with multiple items', function() {
          gen.pop(3, 2).should.eql([ 3, 4 ]);
          gen.index().should.equal(2);
          gen.data().should.eql([ 1, 2 ]);
        });

      });

    });

  });

});
