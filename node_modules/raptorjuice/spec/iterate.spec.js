require('cheeba')(global);

var R = require('../');

describe('An iterator...', function() {

  describe('upon creation...', function() {

    it('does not iterate over falsy values', function() {
      expect(R.iterate().next()).to.be.undefined;
      expect(R.iterate(null).next()).to.be.undefined;
      expect(R.iterate(undefined).next()).to.be.undefined;
      expect(R.iterate([ ]).next()).to.be.undefined;
      expect(R.iterate({ }).next()).to.be.undefined;
    });

    it('can iterate', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5]);
      for(var i = 1; i <= 5; i++) {
        gen.next().should.equal(i);
      }
      expect(gen.next()).to.be.undefined;
    });

    it('can be created with an index', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5], 1);
      gen.next().should.equal(2);
    });

    it('can be created with an index and reversed', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5], 1).reverse();
      gen.next().should.equal(1);
    });

    it('can be created with an index and direction', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5], 5, 'backward');
      gen.next().should.equal(5); 
      gen.next().should.equal(4); 
    });

  });

  describe('remaining...', function() {

    it('maintains correct remaining count', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5]);
      gen.remaining().should.equal(5);
      for(var i = 1; i <= 5; i++) {
        gen.next();
        gen.remaining().should.equal(5 - i);
      }
      gen.remaining().should.equal(0);
    });

    it('maintains correct remaining upon reversal', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5]);
      for(var i = 1; i <= 5; i++) {
        gen.next().should.equal(i);
      }
      gen.remaining().should.equal(0);
      gen.reverse();
      gen.remaining().should.equal(5);
      for(var i = 1; i <= 5; i++) {
        gen.next().should.equal(5 - (i - 1));
      }
      gen.remaining().should.equal(0);
      gen.reverse();
      gen.remaining().should.equal(5);
      for(var i = 1; i <= 5; i++) {
        gen.next().should.equal(i);
      }
    });

  });

  describe('reverse...', function() {

    it('can reverse an iterator', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5]);
      for(var i = 1; i <= 5; i++) {
        gen.next().should.equal(i);
      }
      expect(gen.next()).to.be.undefined;
      gen.reverse();
      for(var i = 1; i <= 5; i++) {
        gen.next().should.equal(5 - (i - 1));
      }
      expect(gen.next()).to.be.undefined;
      gen.reverse();
      for(var i = 1; i <= 5; i++) {
        gen.next().should.equal(i);
      }
    });

  });

  describe('copy...', function() {

    it('can copy an iterator', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5]);
      for(var i = 1; i <= 2; i++) {
        gen.next().should.equal(i);
      }
      var copy = gen.copy();
      for(var i = 3; i <= 5; i++) {
        gen.next().should.equal(i);
      }
      for(var i = 3; i <= 5; i++) {
        copy.next().should.equal(i);
      }
    });

  });

  describe('reverse...', function() {

    it('pivots in place', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5], 3);
      gen.next().should.equal(4);
      gen.reverse().next().should.equal(4);
      gen.reverse().next().should.equal(4);
    });

    it('can discard its index upon reversal', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5], 3);
      gen.next().should.equal(4);
      gen.reverse({ discard : true }).next().should.equal(3);
      gen.reverse({ discard : true }).next().should.equal(4);
    });

    it('pivots at the beginning of the array', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5], 0).reverse();
      expect(gen.next()).to.be.undefined;
      gen.reverse().next().should.equal(1);
      expect(gen.reverse({ discard : true }).next()).to.be.undefined;
      gen.reverse().next().should.equal(1);
    });

    it('pivots at the end of the array', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5], 5);
      expect(gen.next()).to.be.undefined;
      gen.reverse().next().should.equal(5);
      expect(gen.reverse({ discard : true }).next()).to.be.undefined;
      gen.reverse().next().should.equal(5);
    });

  });

  describe('deplete...', function() {

    it('can deplete its elements', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5]).deplete();
      expect(gen.next()).to.be.undefined;
    });

    it('can deplete its elements in reverse', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5]).reverse().deplete();
      expect(gen.next()).to.be.undefined;
      gen.reverse().next().should.equal(1);
    });

  });

  describe('filter...', function() {

    it('can filter items', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5, 6 ]);
      gen.next().should.equal(1);
      gen.filter(function(i) { return !(i % 2); })
        .should.eql([ 1, 3, 5 ]);
      gen.next().should.equal(2);
      gen.remaining().should.equal(2);
      gen.length().should.equal(3);
    });

  });

  describe('transform...', function() {

    it('can set its tranform method', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5]).transform(function(i) {
        R.contains([ 1, 2 ], i).should.be.true;
        return 'test';
      });
      gen.next().should.equal('test');
      gen.next().should.equal('test');
    });

    it('can remove its tranform method', function() {
      var gen = R.iterate([ 1, 2, 3, 4, 5]).transform(function(i) {
        R.contains([ 1, 2 ], i).should.be.true;
        return 'test';
      }).transform(null);
      gen.next().should.equal(1);
      gen.next().should.equal(2);
    });

    it('can get a relative index from inside the transform method',
        function(done) {
      var gen = R.iterate([ 1, 2, 3, 4 ]);
      gen.transform(function(v, u) {
        expect(u(-1)).to.be.undefined;
        u(0).should.equal(1);
        u(1).should.equal(2);
        expect(u(4)).to.be.undefined;
        done();
      });
      gen.next();
    });

    it('can generate the fibonacci sequence : method 1', function() {
      var gen = R.iterate([ 0, 1 ]);
      gen.transform(function(v, u) {
        this.push([ v + u(1) ]);
        return v;
      });
      var set = [ 0, 1, 2, 3, 5, 8, 13 ];
      for(var i = 0; i <= 7; i++) {
        R.contains(set, gen.next()).should.be.true;
      }
    });

    it('can generate the fibonacci sequence : method 2', function() {
      var gen = R.iterate([ 0, 1 ]);
      gen.transform(function(v, u) {
        if( (this.direction() === 'forward') && !u(2) && u(1) ) {
          this.push([ v + u(1) ]);
        }
        return v;
      });
      var test = [ 0, 1, 1, 2, 3, 5, 8, 13 ];
      for(var i = 0; i <= 7; i++) {
        gen.next().should.equal(test[i]);
      }
    });

    it('can generate the fibonacci sequence : method 3', function() {
      var gen = R.iterate([ 0, 1 ]);
      gen.transform(function(v, u) {
        if( this.direction() === 'forward' && v && !R.isUndefined(u(-1) )) {
          this.push(v + u(-1));
        }
        return v;
      });
      var test = [ 0, 1, 1, 2, 3, 5, 8, 13 ];
      for(var i = 0; i <= 7; i++) {
        gen.next().should.equal(test[i]);
      }
    });

  });

  describe('generate...', function() {

    it('can generate the fibonacci sequence : method 4', function() {
      var gen = R.iterate([ 0, 1 ]);
      gen.generate(function(u) { return u(-2) + u(-1); });
      var test = [ 0, 1, 1, 2, 3, 5, 8, 13 ];
      for(var i = 0; i <= 7; i++) {
        gen.next().should.equal(test[i]);
      }
    });

    it('can generate the fibonacci cubes', function() {
      var gen = R.iterate([ 0, 1 ]);
      gen.generate(function(u) {
        return u(-2) + u(-1);
      }).transform(function(v) {
        return Math.pow(v, 3);
      });
      var test = [ 0, 1, 1, 2, 3, 5, 8, 13 ];
      for(var i = 0; i <= 7; i++) {
        gen.next().should.equal(Math.pow(test[i], 3));
      }
    });

    it('can begin generating with an empty model', function() {
      var gen = R.iterate().generate(function(u) {
        if(R.isUndefined(u(-1))) {
          return 0;
        }
        return u(-1) + 1;
      });
      for(var i = 0; i <= 10; i++) {
        i.should.equal(gen.next());
      }
    });

  });

  describe('cursor...', function() {

    var gen = R.iterate([ 1, 2, 3, 4, 5 ]);

    beforeEach(function() {
      gen.reset();
    });

    it('describes the current index of the iterator', function() {
      gen.next().should.equal(1);
      gen.cursor().should.equal(1);
      gen.next().should.equal(2);
      gen.cursor().should.equal(2);
    });

    describe('can be passed a truthy value to be bumped...', function() {
      
      it('from the beginning of the model', function() {
        gen.cursor(true).should.equal(1);
      });

      it('from the end of the model', function() {
        gen.deplete().reverse().cursor(true).should.equal(5);
      });

    });

  });

  describe('limit...', function() {

    it('can limit iteration with a number', function() {
      var gen = R.iterate().generate(function(u) {
        if(R.isUndefined(u(-1))) {
          return 1;
        }
        return u(-1) + 1;
      }).limit(10);
      var i = 1;
      for(var v; v = gen.next(); v) { i.should.equal(v); i++; }
    });

    it('can limit iteration with a function', function() {
      var gen = R.iterate().generate(function(u) {
        if(R.isUndefined(u(-1))) {
          return 1;
        }
        return u(-1) + 1;
      }).limit(function() {
        return 10;
      });
      for(var v; v = gen.next(); v) { i.should.equal(v); i++; }
    });

  });
  
  describe('move...', function() {

    var test;

    beforeEach(function() {
      test = R.iterate([ 1, 2, 3, 4, 5 ]);
    });

    it('can move the cursor', function() {
      test.move(3).cursor().should.equal(3);
    });

    it('can unsafely move the cursor', function() {
      expect(test.move(6, { unsafe : true }).cursor()).to.be.undefined;
    });

    it('can relatively move the cursor while forward', function() {
      test.move(3).move(1, { relative : true }).cursor().should.equal(4);
    });

    it('can relatively move the cursor while reversed', function() {
      test.move(3).reverse()
        .move(1, { relative : true }).cursor().should.equal(3);
    });

  });

  describe('skip...', function() {

    var test;

    beforeEach(function() {
      test = R.iterate([ 1, 2, 3, 4, 5 ]);
    });

    it('can skip an index', function() {
      test.skip(1).cursor().should.equal(1);
    });

    it('can skip a negative index', function() {
      test.move(2).skip(-1).cursor().should.equal(1);
    });

    it('can skip multiple indicies', function() {
      test.skip(3).cursor().should.equal(3);
    });

    it('can skip an index in reverse', function() {
      test.skip(3).reverse().skip(1).cursor().should.equal(3);
    });

    it('can skip multiple indicies in reverse', function() {
      test.skip(3).skip(-2).cursor().should.equal(1);
    });

  });

  describe('fire...', function() {

    var test;

    beforeEach(function() {
      test = R.iterate([ 1, 2, 3, 4, 5 ]);
    });

    it('can exhaust an iterator', function() {
      test.fire().reverse().cursor(true).should.equal(5);
    });

    it('can exhaust an iterator in reverse', function() {
      test.reverse().deplete()
        .fire().reverse().cursor(true).should.equal(1);
    });

  });

});

describe('chain...', function() {

  it('can chain iterators', function() {
    var a = R.iterate([ 1, 2, 3 ]);
    var b = R.iterate([ 4, 5, 6 ]);
    var c = R.iterate([ 7, 8, 9 ]);
    var chain = R.chain(a, b, c);
    chain.remaining().should.equal(9);
    var i = 0;
    while(a.remaining()) {
      chain.next().should.equal(++i);
    }
    while(b.remaining()) {
      chain.next().should.equal(++i);
    }
    while(c.remaining()) {
      chain.next().should.equal(++i);
    }
    chain.remaining().should.equal(0);
  });

  it('can add iterators on the fly', function() {
    var a = R.iterate([ 1, 2, 3 ]);
    var b = R.iterate([ 4, 5, 6 ]);
    var c = R.iterate([ 7, 8, 9 ]);
    var chain = R.chain(a);
    chain.remaining().should.equal(3);
    var i = 0;
    while(a.remaining()) {
      chain.next().should.equal(++i);
    }
    chain.remaining().should.equal(0);
    chain.add(b, c);
    chain.remaining().should.equal(6);
    while(b.remaining()) {
      chain.next().should.equal(++i);
    }
    while(c.remaining()) {
      chain.next().should.equal(++i);
    }
    chain.remaining().should.equal(0);
    expect(chain.next()).to.be.undefined;
  });

  it('can be created without arguments', function() {
    var a = R.iterate([ 1, 2, 3 ]);
    var chain = R.chain();
    expect(chain.next()).to.be.undefined;
    chain.remaining().should.equal(0);
    chain.add(a);
    chain.remaining().should.equal(3);
  });

});
